
@font-face {
  font-family: "Geist Mono";
  src: url("https://assets.codepen.io/605876/GeistMonoVariableVF.ttf") format("truetype");
}

:root {
  --grid-offset: calc(50% + 80px);
  --color: hsl(0, 0%, 100%);
  --bg: #000;
  --color-alpha: hsl(0 0% 60%);
  --selection: hsl(0 0% 80%);
  --bg-size: 180px;
  --grid-line: hsl(0 0% 80%);
  --input-bg: hsl(0 0% 100% / 0.2);
  --grid-accent: hsl(280 0% 10% / 0.1);
  --glint: white;
  --button-shade: 80%;
}

:root:focus-within {
  --grid-accent: hsl(280 0% 10% / 0.35);
}

@media(prefers-color-scheme: dark) {
  :root {
    --button-shade: 30%;
    --glint: black;
    --grid-accent: hsl(280 0% 80% / 0.1);
    --selection: hsl(0 0% 20%);
    --color: hsl(0 0% 98%);
    --bg: hsl(0 0% 6%);
    --color-alpha: hsl(0 0% 50%);
    --grid-line: hsl(0 0% 12%);
    --input-bg: hsl(0 0% 0% / 0.2);
  }

  :root:focus-within {
    --grid-accent: hsl(280 0% 80% / 0.35);
  }
}

*,
*:after,
*:before {
  box-sizing: border-box;
}



.form-group:focus-within label {
  color: var(--color);
}

.form-group:focus-within input {
  border-color: var(--color);
  color: var(--color);
}

.form-group:focus-within button {
  color: var(--color);
}


label .username{
  position: absolute;
  color: var(--color-alpha);
  bottom: calc(100% + 0.5rem);
  letter-spacing: 0.2ch;
  transition: color 0.2s;
}

.form-group {
  position: relative;
}

.eye circle:nth-of-type(2) {
  fill: var(--glint);
}

.input-container {
  position: relative;
  width: 100%;
  
}

#toggleButton {
  position: absolute; /* Position the reveal button absolutely */
  right: 10px; /* Adjust the right position */
  top: 50%; /* Align the button vertically to the middle */
  transform: translateY(-50%); /* Adjust for vertical centering */
  padding: 0;
  display: grid;
  place-items: center;
  height: 100%;
  aspect-ratio: 1;
  border-radius: 12px;
  border: 0;
  background: linear-gradient(hsl(0 0% var(--button-shade) / calc(var(--active, 0) * 0.5)), hsl(0 0% var(--button-shade) / calc(var(--active, 0) * 0.5))) padding-box;
  border: 6px solid transparent;
  transition: background 0.125s;
  color: var(--color-alpha);
  z-index: 2; /* Ensure the button is above the input */
  cursor: pointer;
  outline: 0;
}



input::selection {
  background: var(--selection);
}

button:is(:focus-visible, :hover) {
  --active: 1;
}

button svg {
  width: 75%;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}



* {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
          font-family: serif;
      }

      

      .container {
          position: relative;
          width: 500px;
          height: 500px;
          display: flex;
          justify-content: center;
          align-items: center;
      }

    

      .form-container h2 {
          font-size: 2em;
          color: #fff;
      }

      .input-container {
          position: relative;
          width: 100%;
      }

      .input-container input {
          position: relative;
          width: 100%;
          padding: 12px 15px;
          background: transparent;
          border-radius: 40px;
          border: 2px solid #fff;
          font-size: 1.2em;
          color: #fff;
          box-shadow: none;
          outline: none;
          padding-right: 60px;
          transition: border-color 0.6s ease;
      }

      .input-container input::placeholder {
          color: rgba(255, 255, 255, 0.75);
          text-align: start;
      }

      .links-container {
          position: relative;
          width: 100%;
          display: flex;
          align-items: center;
          justify-content: space-between;
          padding: 0 20px;
      }

      .links-container a {
          color: #fff;
          text-decoration: none;
      }


      .container {
          display: flex;
          justify-content: center;
          align-items: center;
          min-height: 100vh;
        }
        
        .input-container {
          width: 300px; /* Set your desired width here */
        }
        
        .lid--upper {
          transform-origin: top; /* Set the origin point to the top for rotation */
        }
      
        
        
        .close-lid-animation {
          animation: closeLidAnimation 0.2s forwards; /* Apply the closing animation */
          transform-origin: bottom; /* Pivot point for rotation */
          transform-box: fill-box;
        }
        
        @keyframes closeLidAnimation {
          0% { transform: scaleY(1); } /* Eye open */
          50% { transform: scaleY(1); } /* Eye closing */
          100% { transform: scaleY(-1); } /* Eye closing */
        }
        
  
     /* Define keyframes for blinking animation */
@keyframes blink {
  0% { transform: scaleY(1); } /* Eye open */
  50% { transform: scaleY(0); } /* Eye closing */
  100% { transform: scaleY(1); } /* Eye open again */
}

/* Apply the blinking animation to the upper eyelid */
.lid--upper.blink-animation {
  animation: blink 0.2s 1; /* Blink once */
  transform-origin: bottom; /* Pivot point for rotation */
  transform-box: fill-box; /* Apply transformation in relation to the element's bounding box */
}

/* Hide the eye ball during the blink animation */
.eye circle:nth-of-type(1).blink-hide {
  display: none;
}

/* Add a class to hide the eye ball */


@keyframes revealPassword {
  0% {
    opacity: 0;
    transform: translateX(-100%);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

.reveal-animation {
  animation: revealPassword 0.5s forwards;
}


.open-lid-animation {
  animation: openLidAnimation 0.2s forwards; /* Apply the opening animation */
  transform-origin: bottom; /* Pivot point for rotation */
  transform-box: fill-box;
}

@keyframes openLidAnimation {
  0% { transform: scaleY(0); } /* Eye closed */
  100% { transform: scaleY(1); } /* Eye open */
}

@keyframes scrambleAnimation {
  0% {
    content: attr(data-scramble);
  }
  25% {
    content: " ";
  }
  100% {
    content: attr(data-original);
  }
}

.scramble {
  animation: scrambleAnimation 0.5s forwards;
}
input::-ms-reveal,
    input::-ms-clear {
      display: none;
    }
  
    /* Media query for smaller screens */
@media screen and (max-width: 768px) {
  .form-container {
    width: 90%; /* Adjust width for smaller screens */
  }
}

/* Media query for even smaller screens */
@media screen and (max-width: 480px) {
  .form-container {
    width: 95%; /* Further adjust width for very small screens */
  }
}